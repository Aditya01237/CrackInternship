vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        bool visited[V+1];
        vector<int> ans;
        for(int i=0;i<V;i++)
        {
            visited[i] = false;
        }
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while(q.empty() == false)
        {
            int x = q.front();
            ans.push_back(x);
            q.pop();
            for(auto i:adj[x])
            {
                if(visited[i] == false)
                {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
        return ans;
}



// Can be done using unordered map

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
       unordered_map<int, bool> umap;
       vector<int> ans;
       queue<int> q;
       
       q.push(0);
       while(!q.empty())
       {
           int node=q.front();
           q.pop();
           ans.push_back(node);
           for(auto i: adj[node])
           {
               if(umap[i]!=true)
               {
                   q.push(i);
                   umap[i]=true;
               }
           }
       }
       return ans;
   }
